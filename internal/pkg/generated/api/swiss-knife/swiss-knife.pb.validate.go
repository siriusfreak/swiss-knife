// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: swiss-knife.proto

package swissknife

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetGithubEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGithubEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubEventsRequestMultiError, or nil if none found.
func (m *GetGithubEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Owner

	// no validation rules for Repo

	// no validation rules for StartTimestamp

	// no validation rules for EndTimestamp

	if len(errors) > 0 {
		return GetGithubEventsRequestMultiError(errors)
	}

	return nil
}

// GetGithubEventsRequestMultiError is an error wrapping multiple validation
// errors returned by GetGithubEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGithubEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubEventsRequestMultiError) AllErrors() []error { return m }

// GetGithubEventsRequestValidationError is the validation error returned by
// GetGithubEventsRequest.Validate if the designated constraints aren't met.
type GetGithubEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubEventsRequestValidationError) ErrorName() string {
	return "GetGithubEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGithubEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubEventsRequestValidationError{}

// Validate checks the field values on GetGithubEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGithubEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubEventsResponseMultiError, or nil if none found.
func (m *GetGithubEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGithubEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGithubEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGithubEventsResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGithubEventsResponseMultiError(errors)
	}

	return nil
}

// GetGithubEventsResponseMultiError is an error wrapping multiple validation
// errors returned by GetGithubEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGithubEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubEventsResponseMultiError) AllErrors() []error { return m }

// GetGithubEventsResponseValidationError is the validation error returned by
// GetGithubEventsResponse.Validate if the designated constraints aren't met.
type GetGithubEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubEventsResponseValidationError) ErrorName() string {
	return "GetGithubEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGithubEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubEventsResponseValidationError{}

// Validate checks the field values on GithubEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GithubEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GithubEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GithubEventMultiError, or
// nil if none found.
func (m *GithubEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *GithubEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Repo

	// no validation rules for Owner

	// no validation rules for Payload

	// no validation rules for Timestamp

	// no validation rules for User

	if len(errors) > 0 {
		return GithubEventMultiError(errors)
	}

	return nil
}

// GithubEventMultiError is an error wrapping multiple validation errors
// returned by GithubEvent.ValidateAll() if the designated constraints aren't met.
type GithubEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GithubEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GithubEventMultiError) AllErrors() []error { return m }

// GithubEventValidationError is the validation error returned by
// GithubEvent.Validate if the designated constraints aren't met.
type GithubEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GithubEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GithubEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GithubEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GithubEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GithubEventValidationError) ErrorName() string { return "GithubEventValidationError" }

// Error satisfies the builtin error interface
func (e GithubEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGithubEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GithubEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GithubEventValidationError{}

// Validate checks the field values on CacheGithubEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CacheGithubEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CacheGithubEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CacheGithubEventsRequestMultiError, or nil if none found.
func (m *CacheGithubEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CacheGithubEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Owner

	// no validation rules for Repo

	// no validation rules for Limit

	if len(errors) > 0 {
		return CacheGithubEventsRequestMultiError(errors)
	}

	return nil
}

// CacheGithubEventsRequestMultiError is an error wrapping multiple validation
// errors returned by CacheGithubEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type CacheGithubEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CacheGithubEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CacheGithubEventsRequestMultiError) AllErrors() []error { return m }

// CacheGithubEventsRequestValidationError is the validation error returned by
// CacheGithubEventsRequest.Validate if the designated constraints aren't met.
type CacheGithubEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CacheGithubEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CacheGithubEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CacheGithubEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CacheGithubEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CacheGithubEventsRequestValidationError) ErrorName() string {
	return "CacheGithubEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CacheGithubEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCacheGithubEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CacheGithubEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CacheGithubEventsRequestValidationError{}

// Validate checks the field values on CacheGithubEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CacheGithubEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CacheGithubEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CacheGithubEventsResponseMultiError, or nil if none found.
func (m *CacheGithubEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CacheGithubEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CacheGithubEventsResponseMultiError(errors)
	}

	return nil
}

// CacheGithubEventsResponseMultiError is an error wrapping multiple validation
// errors returned by CacheGithubEventsResponse.ValidateAll() if the
// designated constraints aren't met.
type CacheGithubEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CacheGithubEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CacheGithubEventsResponseMultiError) AllErrors() []error { return m }

// CacheGithubEventsResponseValidationError is the validation error returned by
// CacheGithubEventsResponse.Validate if the designated constraints aren't met.
type CacheGithubEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CacheGithubEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CacheGithubEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CacheGithubEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CacheGithubEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CacheGithubEventsResponseValidationError) ErrorName() string {
	return "CacheGithubEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CacheGithubEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCacheGithubEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CacheGithubEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CacheGithubEventsResponseValidationError{}

// Validate checks the field values on GetJIRATasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJIRATasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJIRATasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJIRATasksRequestMultiError, or nil if none found.
func (m *GetJIRATasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJIRATasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Jql

	if len(errors) > 0 {
		return GetJIRATasksRequestMultiError(errors)
	}

	return nil
}

// GetJIRATasksRequestMultiError is an error wrapping multiple validation
// errors returned by GetJIRATasksRequest.ValidateAll() if the designated
// constraints aren't met.
type GetJIRATasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJIRATasksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJIRATasksRequestMultiError) AllErrors() []error { return m }

// GetJIRATasksRequestValidationError is the validation error returned by
// GetJIRATasksRequest.Validate if the designated constraints aren't met.
type GetJIRATasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJIRATasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJIRATasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJIRATasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJIRATasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJIRATasksRequestValidationError) ErrorName() string {
	return "GetJIRATasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJIRATasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJIRATasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJIRATasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJIRATasksRequestValidationError{}

// Validate checks the field values on GetJIRATasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJIRATasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJIRATasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJIRATasksResponseMultiError, or nil if none found.
func (m *GetJIRATasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJIRATasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJIRATasksResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJIRATasksResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJIRATasksResponseValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJIRATasksResponseMultiError(errors)
	}

	return nil
}

// GetJIRATasksResponseMultiError is an error wrapping multiple validation
// errors returned by GetJIRATasksResponse.ValidateAll() if the designated
// constraints aren't met.
type GetJIRATasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJIRATasksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJIRATasksResponseMultiError) AllErrors() []error { return m }

// GetJIRATasksResponseValidationError is the validation error returned by
// GetJIRATasksResponse.Validate if the designated constraints aren't met.
type GetJIRATasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJIRATasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJIRATasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJIRATasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJIRATasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJIRATasksResponseValidationError) ErrorName() string {
	return "GetJIRATasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJIRATasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJIRATasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJIRATasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJIRATasksResponseValidationError{}

// Validate checks the field values on JIRAFieldStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JIRAFieldStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JIRAFieldStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JIRAFieldStatusMultiError, or nil if none found.
func (m *JIRAFieldStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *JIRAFieldStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return JIRAFieldStatusMultiError(errors)
	}

	return nil
}

// JIRAFieldStatusMultiError is an error wrapping multiple validation errors
// returned by JIRAFieldStatus.ValidateAll() if the designated constraints
// aren't met.
type JIRAFieldStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JIRAFieldStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JIRAFieldStatusMultiError) AllErrors() []error { return m }

// JIRAFieldStatusValidationError is the validation error returned by
// JIRAFieldStatus.Validate if the designated constraints aren't met.
type JIRAFieldStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JIRAFieldStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JIRAFieldStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JIRAFieldStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JIRAFieldStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JIRAFieldStatusValidationError) ErrorName() string { return "JIRAFieldStatusValidationError" }

// Error satisfies the builtin error interface
func (e JIRAFieldStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJIRAFieldStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JIRAFieldStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JIRAFieldStatusValidationError{}

// Validate checks the field values on JIRAFieldParent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JIRAFieldParent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JIRAFieldParent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JIRAFieldParentMultiError, or nil if none found.
func (m *JIRAFieldParent) ValidateAll() error {
	return m.validate(true)
}

func (m *JIRAFieldParent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return JIRAFieldParentMultiError(errors)
	}

	return nil
}

// JIRAFieldParentMultiError is an error wrapping multiple validation errors
// returned by JIRAFieldParent.ValidateAll() if the designated constraints
// aren't met.
type JIRAFieldParentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JIRAFieldParentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JIRAFieldParentMultiError) AllErrors() []error { return m }

// JIRAFieldParentValidationError is the validation error returned by
// JIRAFieldParent.Validate if the designated constraints aren't met.
type JIRAFieldParentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JIRAFieldParentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JIRAFieldParentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JIRAFieldParentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JIRAFieldParentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JIRAFieldParentValidationError) ErrorName() string { return "JIRAFieldParentValidationError" }

// Error satisfies the builtin error interface
func (e JIRAFieldParentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJIRAFieldParent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JIRAFieldParentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JIRAFieldParentValidationError{}

// Validate checks the field values on JIRAFieldIssueType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JIRAFieldIssueType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JIRAFieldIssueType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JIRAFieldIssueTypeMultiError, or nil if none found.
func (m *JIRAFieldIssueType) ValidateAll() error {
	return m.validate(true)
}

func (m *JIRAFieldIssueType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return JIRAFieldIssueTypeMultiError(errors)
	}

	return nil
}

// JIRAFieldIssueTypeMultiError is an error wrapping multiple validation errors
// returned by JIRAFieldIssueType.ValidateAll() if the designated constraints
// aren't met.
type JIRAFieldIssueTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JIRAFieldIssueTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JIRAFieldIssueTypeMultiError) AllErrors() []error { return m }

// JIRAFieldIssueTypeValidationError is the validation error returned by
// JIRAFieldIssueType.Validate if the designated constraints aren't met.
type JIRAFieldIssueTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JIRAFieldIssueTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JIRAFieldIssueTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JIRAFieldIssueTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JIRAFieldIssueTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JIRAFieldIssueTypeValidationError) ErrorName() string {
	return "JIRAFieldIssueTypeValidationError"
}

// Error satisfies the builtin error interface
func (e JIRAFieldIssueTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJIRAFieldIssueType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JIRAFieldIssueTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JIRAFieldIssueTypeValidationError{}

// Validate checks the field values on JIRAFieldInOutwardIssue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JIRAFieldInOutwardIssue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JIRAFieldInOutwardIssue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JIRAFieldInOutwardIssueMultiError, or nil if none found.
func (m *JIRAFieldInOutwardIssue) ValidateAll() error {
	return m.validate(true)
}

func (m *JIRAFieldInOutwardIssue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return JIRAFieldInOutwardIssueMultiError(errors)
	}

	return nil
}

// JIRAFieldInOutwardIssueMultiError is an error wrapping multiple validation
// errors returned by JIRAFieldInOutwardIssue.ValidateAll() if the designated
// constraints aren't met.
type JIRAFieldInOutwardIssueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JIRAFieldInOutwardIssueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JIRAFieldInOutwardIssueMultiError) AllErrors() []error { return m }

// JIRAFieldInOutwardIssueValidationError is the validation error returned by
// JIRAFieldInOutwardIssue.Validate if the designated constraints aren't met.
type JIRAFieldInOutwardIssueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JIRAFieldInOutwardIssueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JIRAFieldInOutwardIssueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JIRAFieldInOutwardIssueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JIRAFieldInOutwardIssueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JIRAFieldInOutwardIssueValidationError) ErrorName() string {
	return "JIRAFieldInOutwardIssueValidationError"
}

// Error satisfies the builtin error interface
func (e JIRAFieldInOutwardIssueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJIRAFieldInOutwardIssue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JIRAFieldInOutwardIssueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JIRAFieldInOutwardIssueValidationError{}

// Validate checks the field values on JIRAFieldIssueLink with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JIRAFieldIssueLink) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JIRAFieldIssueLink with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JIRAFieldIssueLinkMultiError, or nil if none found.
func (m *JIRAFieldIssueLink) ValidateAll() error {
	return m.validate(true)
}

func (m *JIRAFieldIssueLink) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInwardIssue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JIRAFieldIssueLinkValidationError{
					field:  "InwardIssue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JIRAFieldIssueLinkValidationError{
					field:  "InwardIssue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInwardIssue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JIRAFieldIssueLinkValidationError{
				field:  "InwardIssue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutwardIssue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JIRAFieldIssueLinkValidationError{
					field:  "OutwardIssue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JIRAFieldIssueLinkValidationError{
					field:  "OutwardIssue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutwardIssue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JIRAFieldIssueLinkValidationError{
				field:  "OutwardIssue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JIRAFieldIssueLinkValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JIRAFieldIssueLinkValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JIRAFieldIssueLinkValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JIRAFieldIssueLinkMultiError(errors)
	}

	return nil
}

// JIRAFieldIssueLinkMultiError is an error wrapping multiple validation errors
// returned by JIRAFieldIssueLink.ValidateAll() if the designated constraints
// aren't met.
type JIRAFieldIssueLinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JIRAFieldIssueLinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JIRAFieldIssueLinkMultiError) AllErrors() []error { return m }

// JIRAFieldIssueLinkValidationError is the validation error returned by
// JIRAFieldIssueLink.Validate if the designated constraints aren't met.
type JIRAFieldIssueLinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JIRAFieldIssueLinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JIRAFieldIssueLinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JIRAFieldIssueLinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JIRAFieldIssueLinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JIRAFieldIssueLinkValidationError) ErrorName() string {
	return "JIRAFieldIssueLinkValidationError"
}

// Error satisfies the builtin error interface
func (e JIRAFieldIssueLinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJIRAFieldIssueLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JIRAFieldIssueLinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JIRAFieldIssueLinkValidationError{}

// Validate checks the field values on JIRATaskFields with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JIRATaskFields) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JIRATaskFields with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JIRATaskFieldsMultiError,
// or nil if none found.
func (m *JIRATaskFields) ValidateAll() error {
	return m.validate(true)
}

func (m *JIRATaskFields) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JIRATaskFieldsValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JIRATaskFieldsValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JIRATaskFieldsValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EpicKey

	// no validation rules for Summary

	if all {
		switch v := interface{}(m.GetParent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JIRATaskFieldsValidationError{
					field:  "Parent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JIRATaskFieldsValidationError{
					field:  "Parent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JIRATaskFieldsValidationError{
				field:  "Parent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetIssueLinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JIRATaskFieldsValidationError{
						field:  fmt.Sprintf("IssueLinks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JIRATaskFieldsValidationError{
						field:  fmt.Sprintf("IssueLinks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JIRATaskFieldsValidationError{
					field:  fmt.Sprintf("IssueLinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetIssueType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JIRATaskFieldsValidationError{
					field:  "IssueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JIRATaskFieldsValidationError{
					field:  "IssueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssueType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JIRATaskFieldsValidationError{
				field:  "IssueType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JIRATaskFieldsMultiError(errors)
	}

	return nil
}

// JIRATaskFieldsMultiError is an error wrapping multiple validation errors
// returned by JIRATaskFields.ValidateAll() if the designated constraints
// aren't met.
type JIRATaskFieldsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JIRATaskFieldsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JIRATaskFieldsMultiError) AllErrors() []error { return m }

// JIRATaskFieldsValidationError is the validation error returned by
// JIRATaskFields.Validate if the designated constraints aren't met.
type JIRATaskFieldsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JIRATaskFieldsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JIRATaskFieldsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JIRATaskFieldsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JIRATaskFieldsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JIRATaskFieldsValidationError) ErrorName() string { return "JIRATaskFieldsValidationError" }

// Error satisfies the builtin error interface
func (e JIRATaskFieldsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJIRATaskFields.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JIRATaskFieldsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JIRATaskFieldsValidationError{}

// Validate checks the field values on JIRATask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JIRATask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JIRATask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JIRATaskMultiError, or nil
// if none found.
func (m *JIRATask) ValidateAll() error {
	return m.validate(true)
}

func (m *JIRATask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetFields()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JIRATaskValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JIRATaskValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JIRATaskValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JIRATaskMultiError(errors)
	}

	return nil
}

// JIRATaskMultiError is an error wrapping multiple validation errors returned
// by JIRATask.ValidateAll() if the designated constraints aren't met.
type JIRATaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JIRATaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JIRATaskMultiError) AllErrors() []error { return m }

// JIRATaskValidationError is the validation error returned by
// JIRATask.Validate if the designated constraints aren't met.
type JIRATaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JIRATaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JIRATaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JIRATaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JIRATaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JIRATaskValidationError) ErrorName() string { return "JIRATaskValidationError" }

// Error satisfies the builtin error interface
func (e JIRATaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJIRATask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JIRATaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JIRATaskValidationError{}

// Validate checks the field values on GetSavedJQLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSavedJQLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSavedJQLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSavedJQLRequestMultiError, or nil if none found.
func (m *GetSavedJQLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSavedJQLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSavedJQLRequestMultiError(errors)
	}

	return nil
}

// GetSavedJQLRequestMultiError is an error wrapping multiple validation errors
// returned by GetSavedJQLRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSavedJQLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSavedJQLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSavedJQLRequestMultiError) AllErrors() []error { return m }

// GetSavedJQLRequestValidationError is the validation error returned by
// GetSavedJQLRequest.Validate if the designated constraints aren't met.
type GetSavedJQLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSavedJQLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSavedJQLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSavedJQLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSavedJQLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSavedJQLRequestValidationError) ErrorName() string {
	return "GetSavedJQLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSavedJQLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSavedJQLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSavedJQLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSavedJQLRequestValidationError{}

// Validate checks the field values on GetSavedJQLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSavedJQLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSavedJQLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSavedJQLResponseMultiError, or nil if none found.
func (m *GetSavedJQLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSavedJQLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSavedJQL() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSavedJQLResponseValidationError{
						field:  fmt.Sprintf("SavedJQL[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSavedJQLResponseValidationError{
						field:  fmt.Sprintf("SavedJQL[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSavedJQLResponseValidationError{
					field:  fmt.Sprintf("SavedJQL[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSavedJQLResponseMultiError(errors)
	}

	return nil
}

// GetSavedJQLResponseMultiError is an error wrapping multiple validation
// errors returned by GetSavedJQLResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSavedJQLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSavedJQLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSavedJQLResponseMultiError) AllErrors() []error { return m }

// GetSavedJQLResponseValidationError is the validation error returned by
// GetSavedJQLResponse.Validate if the designated constraints aren't met.
type GetSavedJQLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSavedJQLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSavedJQLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSavedJQLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSavedJQLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSavedJQLResponseValidationError) ErrorName() string {
	return "GetSavedJQLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSavedJQLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSavedJQLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSavedJQLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSavedJQLResponseValidationError{}

// Validate checks the field values on SavedJQL with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SavedJQL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SavedJQL with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SavedJQLMultiError, or nil
// if none found.
func (m *SavedJQL) ValidateAll() error {
	return m.validate(true)
}

func (m *SavedJQL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Jql

	if len(errors) > 0 {
		return SavedJQLMultiError(errors)
	}

	return nil
}

// SavedJQLMultiError is an error wrapping multiple validation errors returned
// by SavedJQL.ValidateAll() if the designated constraints aren't met.
type SavedJQLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SavedJQLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SavedJQLMultiError) AllErrors() []error { return m }

// SavedJQLValidationError is the validation error returned by
// SavedJQL.Validate if the designated constraints aren't met.
type SavedJQLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SavedJQLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SavedJQLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SavedJQLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SavedJQLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SavedJQLValidationError) ErrorName() string { return "SavedJQLValidationError" }

// Error satisfies the builtin error interface
func (e SavedJQLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSavedJQL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SavedJQLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SavedJQLValidationError{}

// Validate checks the field values on DeleteSavedJQLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSavedJQLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSavedJQLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSavedJQLRequestMultiError, or nil if none found.
func (m *DeleteSavedJQLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSavedJQLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSavedJQLRequestMultiError(errors)
	}

	return nil
}

// DeleteSavedJQLRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSavedJQLRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSavedJQLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSavedJQLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSavedJQLRequestMultiError) AllErrors() []error { return m }

// DeleteSavedJQLRequestValidationError is the validation error returned by
// DeleteSavedJQLRequest.Validate if the designated constraints aren't met.
type DeleteSavedJQLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSavedJQLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSavedJQLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSavedJQLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSavedJQLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSavedJQLRequestValidationError) ErrorName() string {
	return "DeleteSavedJQLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSavedJQLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSavedJQLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSavedJQLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSavedJQLRequestValidationError{}

// Validate checks the field values on DeleteSavedJQLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSavedJQLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSavedJQLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSavedJQLResponseMultiError, or nil if none found.
func (m *DeleteSavedJQLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSavedJQLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSavedJQLResponseMultiError(errors)
	}

	return nil
}

// DeleteSavedJQLResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSavedJQLResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSavedJQLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSavedJQLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSavedJQLResponseMultiError) AllErrors() []error { return m }

// DeleteSavedJQLResponseValidationError is the validation error returned by
// DeleteSavedJQLResponse.Validate if the designated constraints aren't met.
type DeleteSavedJQLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSavedJQLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSavedJQLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSavedJQLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSavedJQLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSavedJQLResponseValidationError) ErrorName() string {
	return "DeleteSavedJQLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSavedJQLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSavedJQLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSavedJQLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSavedJQLResponseValidationError{}

// Validate checks the field values on SaveJQLRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveJQLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveJQLRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveJQLRequestMultiError,
// or nil if none found.
func (m *SaveJQLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveJQLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Jql

	if len(errors) > 0 {
		return SaveJQLRequestMultiError(errors)
	}

	return nil
}

// SaveJQLRequestMultiError is an error wrapping multiple validation errors
// returned by SaveJQLRequest.ValidateAll() if the designated constraints
// aren't met.
type SaveJQLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveJQLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveJQLRequestMultiError) AllErrors() []error { return m }

// SaveJQLRequestValidationError is the validation error returned by
// SaveJQLRequest.Validate if the designated constraints aren't met.
type SaveJQLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveJQLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveJQLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveJQLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveJQLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveJQLRequestValidationError) ErrorName() string { return "SaveJQLRequestValidationError" }

// Error satisfies the builtin error interface
func (e SaveJQLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveJQLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveJQLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveJQLRequestValidationError{}

// Validate checks the field values on SaveJQLResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SaveJQLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveJQLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveJQLResponseMultiError, or nil if none found.
func (m *SaveJQLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveJQLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SaveJQLResponseMultiError(errors)
	}

	return nil
}

// SaveJQLResponseMultiError is an error wrapping multiple validation errors
// returned by SaveJQLResponse.ValidateAll() if the designated constraints
// aren't met.
type SaveJQLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveJQLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveJQLResponseMultiError) AllErrors() []error { return m }

// SaveJQLResponseValidationError is the validation error returned by
// SaveJQLResponse.Validate if the designated constraints aren't met.
type SaveJQLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveJQLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveJQLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveJQLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveJQLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveJQLResponseValidationError) ErrorName() string { return "SaveJQLResponseValidationError" }

// Error satisfies the builtin error interface
func (e SaveJQLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveJQLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveJQLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveJQLResponseValidationError{}
