// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: swiss-knife.proto

package swissknife

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SwissKnife_GetJIRATasks_FullMethodName      = "/swissknife.SwissKnife/GetJIRATasks"
	SwissKnife_GetSavedJQL_FullMethodName       = "/swissknife.SwissKnife/GetSavedJQL"
	SwissKnife_DeleteSavedJQL_FullMethodName    = "/swissknife.SwissKnife/DeleteSavedJQL"
	SwissKnife_SaveJQL_FullMethodName           = "/swissknife.SwissKnife/SaveJQL"
	SwissKnife_CacheGithubEvents_FullMethodName = "/swissknife.SwissKnife/CacheGithubEvents"
	SwissKnife_GetGithubEvents_FullMethodName   = "/swissknife.SwissKnife/GetGithubEvents"
)

// SwissKnifeClient is the client API for SwissKnife service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwissKnifeClient interface {
	GetJIRATasks(ctx context.Context, in *GetJIRATasksRequest, opts ...grpc.CallOption) (*GetJIRATasksResponse, error)
	GetSavedJQL(ctx context.Context, in *GetSavedJQLRequest, opts ...grpc.CallOption) (*GetSavedJQLResponse, error)
	DeleteSavedJQL(ctx context.Context, in *DeleteSavedJQLRequest, opts ...grpc.CallOption) (*DeleteSavedJQLResponse, error)
	SaveJQL(ctx context.Context, in *SaveJQLRequest, opts ...grpc.CallOption) (*SaveJQLResponse, error)
	CacheGithubEvents(ctx context.Context, in *CacheGithubEventsRequest, opts ...grpc.CallOption) (*CacheGithubEventsResponse, error)
	GetGithubEvents(ctx context.Context, in *GetGithubEventsRequest, opts ...grpc.CallOption) (*GetGithubEventsResponse, error)
}

type swissKnifeClient struct {
	cc grpc.ClientConnInterface
}

func NewSwissKnifeClient(cc grpc.ClientConnInterface) SwissKnifeClient {
	return &swissKnifeClient{cc}
}

func (c *swissKnifeClient) GetJIRATasks(ctx context.Context, in *GetJIRATasksRequest, opts ...grpc.CallOption) (*GetJIRATasksResponse, error) {
	out := new(GetJIRATasksResponse)
	err := c.cc.Invoke(ctx, SwissKnife_GetJIRATasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swissKnifeClient) GetSavedJQL(ctx context.Context, in *GetSavedJQLRequest, opts ...grpc.CallOption) (*GetSavedJQLResponse, error) {
	out := new(GetSavedJQLResponse)
	err := c.cc.Invoke(ctx, SwissKnife_GetSavedJQL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swissKnifeClient) DeleteSavedJQL(ctx context.Context, in *DeleteSavedJQLRequest, opts ...grpc.CallOption) (*DeleteSavedJQLResponse, error) {
	out := new(DeleteSavedJQLResponse)
	err := c.cc.Invoke(ctx, SwissKnife_DeleteSavedJQL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swissKnifeClient) SaveJQL(ctx context.Context, in *SaveJQLRequest, opts ...grpc.CallOption) (*SaveJQLResponse, error) {
	out := new(SaveJQLResponse)
	err := c.cc.Invoke(ctx, SwissKnife_SaveJQL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swissKnifeClient) CacheGithubEvents(ctx context.Context, in *CacheGithubEventsRequest, opts ...grpc.CallOption) (*CacheGithubEventsResponse, error) {
	out := new(CacheGithubEventsResponse)
	err := c.cc.Invoke(ctx, SwissKnife_CacheGithubEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swissKnifeClient) GetGithubEvents(ctx context.Context, in *GetGithubEventsRequest, opts ...grpc.CallOption) (*GetGithubEventsResponse, error) {
	out := new(GetGithubEventsResponse)
	err := c.cc.Invoke(ctx, SwissKnife_GetGithubEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwissKnifeServer is the server API for SwissKnife service.
// All implementations should embed UnimplementedSwissKnifeServer
// for forward compatibility
type SwissKnifeServer interface {
	GetJIRATasks(context.Context, *GetJIRATasksRequest) (*GetJIRATasksResponse, error)
	GetSavedJQL(context.Context, *GetSavedJQLRequest) (*GetSavedJQLResponse, error)
	DeleteSavedJQL(context.Context, *DeleteSavedJQLRequest) (*DeleteSavedJQLResponse, error)
	SaveJQL(context.Context, *SaveJQLRequest) (*SaveJQLResponse, error)
	CacheGithubEvents(context.Context, *CacheGithubEventsRequest) (*CacheGithubEventsResponse, error)
	GetGithubEvents(context.Context, *GetGithubEventsRequest) (*GetGithubEventsResponse, error)
}

// UnimplementedSwissKnifeServer should be embedded to have forward compatible implementations.
type UnimplementedSwissKnifeServer struct {
}

func (UnimplementedSwissKnifeServer) GetJIRATasks(context.Context, *GetJIRATasksRequest) (*GetJIRATasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJIRATasks not implemented")
}
func (UnimplementedSwissKnifeServer) GetSavedJQL(context.Context, *GetSavedJQLRequest) (*GetSavedJQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSavedJQL not implemented")
}
func (UnimplementedSwissKnifeServer) DeleteSavedJQL(context.Context, *DeleteSavedJQLRequest) (*DeleteSavedJQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSavedJQL not implemented")
}
func (UnimplementedSwissKnifeServer) SaveJQL(context.Context, *SaveJQLRequest) (*SaveJQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveJQL not implemented")
}
func (UnimplementedSwissKnifeServer) CacheGithubEvents(context.Context, *CacheGithubEventsRequest) (*CacheGithubEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheGithubEvents not implemented")
}
func (UnimplementedSwissKnifeServer) GetGithubEvents(context.Context, *GetGithubEventsRequest) (*GetGithubEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGithubEvents not implemented")
}

// UnsafeSwissKnifeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwissKnifeServer will
// result in compilation errors.
type UnsafeSwissKnifeServer interface {
	mustEmbedUnimplementedSwissKnifeServer()
}

func RegisterSwissKnifeServer(s grpc.ServiceRegistrar, srv SwissKnifeServer) {
	s.RegisterService(&SwissKnife_ServiceDesc, srv)
}

func _SwissKnife_GetJIRATasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJIRATasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwissKnifeServer).GetJIRATasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwissKnife_GetJIRATasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwissKnifeServer).GetJIRATasks(ctx, req.(*GetJIRATasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwissKnife_GetSavedJQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedJQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwissKnifeServer).GetSavedJQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwissKnife_GetSavedJQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwissKnifeServer).GetSavedJQL(ctx, req.(*GetSavedJQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwissKnife_DeleteSavedJQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSavedJQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwissKnifeServer).DeleteSavedJQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwissKnife_DeleteSavedJQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwissKnifeServer).DeleteSavedJQL(ctx, req.(*DeleteSavedJQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwissKnife_SaveJQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveJQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwissKnifeServer).SaveJQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwissKnife_SaveJQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwissKnifeServer).SaveJQL(ctx, req.(*SaveJQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwissKnife_CacheGithubEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheGithubEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwissKnifeServer).CacheGithubEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwissKnife_CacheGithubEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwissKnifeServer).CacheGithubEvents(ctx, req.(*CacheGithubEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwissKnife_GetGithubEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGithubEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwissKnifeServer).GetGithubEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwissKnife_GetGithubEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwissKnifeServer).GetGithubEvents(ctx, req.(*GetGithubEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwissKnife_ServiceDesc is the grpc.ServiceDesc for SwissKnife service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwissKnife_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swissknife.SwissKnife",
	HandlerType: (*SwissKnifeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJIRATasks",
			Handler:    _SwissKnife_GetJIRATasks_Handler,
		},
		{
			MethodName: "GetSavedJQL",
			Handler:    _SwissKnife_GetSavedJQL_Handler,
		},
		{
			MethodName: "DeleteSavedJQL",
			Handler:    _SwissKnife_DeleteSavedJQL_Handler,
		},
		{
			MethodName: "SaveJQL",
			Handler:    _SwissKnife_SaveJQL_Handler,
		},
		{
			MethodName: "CacheGithubEvents",
			Handler:    _SwissKnife_CacheGithubEvents_Handler,
		},
		{
			MethodName: "GetGithubEvents",
			Handler:    _SwissKnife_GetGithubEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swiss-knife.proto",
}
